==========================
Описание устройства тасков
==========================

Каждый квест(таск) может быть представлен в одном из двух форматов: XML или исполняемый файл. На основе файла с таском создаётся провайдер, который может выдавать индивидуальные задачи для каждой команды.

Общие положения:
----------------

Использование ссылок
^^^^^^^^^^^^^^^^^^^^

В тексте квеста можно использовать относительные ссылки на папку ``static``, например ``href='static/task.data'``,
при этом пользователю будет отправлен файл расположенный в подпапке ``static`` из папки где расположен сам таск. (**важно, ссылка всегда должна быть относительной**)

Генерация индивидуальных таксков
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

В тексте таска можно использовать шаблоны ``%TEAM%`` и ``%HASH%``

* шаблон ``%TEAM%`` разворачивается в id соманды
* шаблон ``%HASH%`` разворачивается в *md5(task_id + team_id + salt)*, например *md5("random:300" + "18" + salt)*

Рекомендации:
^^^^^^^^^^^^^

* Используйте, по-возможности, XML чекеры - они проще в реализации, поддержке и применимы для большинства тасков
* Не используйте текстовое описание таска и параметр file, лучше используйте HTML и делайте ссылки в папку static

Примеры:
^^^^^^^^

* `example.xml <https://github.com/last-g/qoala/blob/master/doc/tasks/example.xml>`_ - пример XML таска
* `example.py <https://github.com/last-g/qoala/blob/master/doc/tasks/example.py>`_ - пример script таска

Особые замечания:
^^^^^^^^^^^^^^^^^

Вся система работает в кодировке UTF-8 и вы всегда должны использовать явным образом только её
при любом взаимодействии с сервером. Зачастую это может потребовать от вас хаков, например таких: <https://github.com/last-g/qoala/blob/master/doc/tasks/example.py#L24>


XMLQuestProvider
----------------

Используется для простых тасков, описываемых с помощью XML. Каждый таск должен лежать в файле с именем ``task_name.xml``, где ``task_name`` - имя таска.
Пример такого файла:

.. code-block:: xml

    <?xml version="1.0" encoding="utf-8" ?>
    <quest series="random" id="random:300" proto="xmlquest-2.0">
        <name>Little things</name>
        <task type="html" lang="en"><a href="static/d755defd206f4a71fd4118ca815ca3c5/task.rs">Find the key</a></task>
        <task type="html" lang="ru"><a href="static/d755defd206f4a71fd4118ca815ca3c5/task.rs">Найдите ключ</a></task>
        <checker strict="yes">
            <solution case="insensitive">semicolon</solution>
            <solution case="sensitive">ZaBoRcHiCk</solution>
        </checker>
    </quest>

Описание формата:
^^^^^^^^^^^^^^^^^
Квест описывается одним xml документом Корневой тэг должен называться ``quest`` и иметь атрибуты:

- proto - версия формата (xmlquest-2.0)
- id - идентификатор квеста (в формате ``series:score``, например ``stegano:400``)
- series - идентификатор категории квеста

Необходимые узлы документа:

- *name* - текстовый узел содержит имя квеста
- *task* - узел, описывающий задание таска, имеет необязательные атрибуты **type** и **lang**
 - необязательный атрибут **type** указывает на формат описания квеста. Допустимые варианты ``text`` и ``html``, по-умолчанию используется значение ``text``. При значении ``html`` должен единсвенный дочерний элемент и быть валидным XML.
 - необязательный атрибут **lang** указывает язык описания таска. Допустимые варианты ``ru`` и ``en``

Опциональные узлы:

- *file* - текстовый узел: имя файла, необходимого командам для решения квеста. Файл должен быть в папке static рядом с файлом описанием.
- *checker* - узел описывающий процесс приема решения, может содержать внутри себя текстовые узлы solution - возможные решени (решения обрабатываются логическим ИЛИ). Узел имеет необязательный параметр strict (принимающий значения: yes - решение будет признанно неверным, если совпадения с ответами не найдено или no(по умолчанию) - решение будет помечено для ручной проверки, если совпадения с ответами не найдено).
 - *solution* - обязательные узлы, содержащие в себе ответ на таск. Таких узлов может быть несколько.
  + необязательный атрибут **case** указывающий на то, является ли ответ регистронезависимым. Допустимые значения ``sensitive`` и ``insensitive``
 - необязательный атрибут **strict**, принимающий значения: ``yes`` - решение будет признанно неверным, если совпадения с ответами не найдено или ``no``(по умолчанию) - решение будет помечено для ручной проверки, если совпадения с ответами не найдено.


ScriptQuestProvider
-------------------

Используется для тасков, в которых чекер должен содержать существенную логику. Квест представляется исполняемым файлом, который удовлетворяет следующему интерфейсу.

Квест описывается одним скриптом. Для получения информации о квесте ScriptQuestProvider вызывает скрипт с разными параметрами.

* ``<scriptname> id`` - печатает идентификатор квеста на stdout, в формате series:score (например, ``random:400``)
* ``<scriptname> series`` - печатает идентификатор категории на stdout, должен совпадать с таковым из id
* ``<scriptname> name`` - печатает имя квеста на stdout
* ``<scriptname> create <dump_dir> <team_id>`` - печатает описание нового квеста на stdout в следующем формате (строки, начинающиеся с **text:**, **file:**, **timeout:** - необязательны):


.. code-block::

    ID: <quest identificator>
    text[en]: <quest text description>
    text[ru]: <quest text description>
    html[en]: <quest html description>
    html[ru]: <quest html description>
    timeout: <quest timeout>
    file: <quest file>


* ``<scriptname> user <dump_dir> <quest identificator>`` - из stdin читает строку, описывающие действие(ответ на таск) пользователя, на stdout выводит вердикт(текст, показываемый пользователю)

Где:

* ``<quest identificator>`` - идентефикатор, который возвращает чекер при ``<scriptname> create`` (поле ID: ).
* ``<quest file>`` - файл расположенный в дирректории  ``static``, который будет предложено скачать команде
* ``<dump_dir>`` - каталог, куда можно сохранять данные между вызовами и где можно найти ранее сохраненные данные
* ``<team_id>`` - id команды
* ``<quest timeout>`` - время в секундах, в течении которого квест действителен.
По истечению этого времени Qoala запросит новый квест у чекера.

Все вызовы обязаны возвращать ERRORLEVEL 0, противное поведение считается падением скрипта. Исключением является вызов ``<scriptname> user <dump_dir> <quest identificator>``. В этом случае, если скрипт возвращает 0, то считается, что пользователь успешно решил квест, другие возвращаемые значения идентифицируют, что пользователь ошибся.

stdout во всех случаях обрабатывается специальным образом и отдается пользователю. Для диагностических сообщений рекомендуется использовать stderr, все сообщения с этого стрима будут тщательно логироваться.
